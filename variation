function loadGrain(levels) {
	let result = 0;
	let pickIndxs = [];

	for (let index = 0; index < levels.length; index ++) {
		const isFirst = index === 0;
		const isLast = index === levels.length - 1;
		if ((isFirst || levels[index - 1] <= levels[index]) && (isLast || levels[index] >= levels[index + 1])) {
			pickIndxs.push(index);
		}
	}

	let pickIndex = 0;
	while (pickIndex < pickIndxs.length) {
		let rightSideIndex = -1;
		let newIndx = -1;
		
		for (let j = pickIndex + 1; j < pickIndxs.length; j++) {
			if (levels[pickIndxs[j]] >= levels[pickIndxs[pickIndex]]) {
				rightSideIndex = pickIndxs[j];
				newIndx = j;
				break;
			}
			if (rightSideIndex === -1 || levels[pickIndxs[j]] > levels[rightSideIndex]) {
				rightSideIndex = pickIndxs[j];
			}
		}	

		if (rightSideIndex !== -1) {
			const lowerSide = Math.min(levels[pickIndxs[pickIndex]], levels[rightSideIndex]);
			for (let k = pickIndxs[pickIndex] + 1; k < rightSideIndex; k++) {
				result += lowerSide - levels[k];
			}
		}

		if (newIndx !== -1) {
			pickIndex = newIndx;
		} else {
			pickIndex++;
		}

	}

	return result;
}

function assert(levels, expectedResult) {
	const actualResult = loadGrain(levels);
	const arrPres = JSON.stringify(levels);
	console.log('Testing:', arrPres);
	console.log('Expected: ', expectedResult, 'Actual: ', actualResult);
	if (actualResult !== expectedResult) {
		throw Error(`${actualResult} is not equal to ${expectedResult}`);
	}
	console.log('Success!\n');
}

assert([1], 0);
assert([15, 0, 6, 10, 11, 2, 5], 20);
assert([4, 2, 3, 1, 3, 3, 1, 5], 11);
assert([4, 1, 3], 2);
assert([2, 1, 5, 2, 7, 4, 10], 7);
assert([2, 0, 1, 5, 2, 7], 6);
assert([2, 4, 2], 0);
assert([7, 4], 0);
assert([], 0);
